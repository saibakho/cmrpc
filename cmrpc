#!/usr/bin/env python

import os, sys, time, subprocess
from pypresence import Presence
import pyimgur

import json
def print_dict(data):
	print(json.dumps(data, indent=4, sort_keys=True, ensure_ascii=False))

def wait(callback=None, args=(), err_msg=""):
	while True:
		try:
			callback(*args)
			break
		except:
			print(err_msg)
			time.sleep(1)

class RPC:
	def __init__(self, rpc_id, imgur_id):
		self.cover_dir = os.path.dirname(__file__)+"/covers"
		self.imgur = pyimgur.Imgur(imgur_id)
		self.rpc = Presence(rpc_id)
		self.saved_imgs = {}

	def start(self):
		wait(callback=subprocess.check_output, args=(["pgrep", "cmus"],), 
			 err_msg="[ERROR] No cmus process found. Waiting...")
		try:
			cur_song = ""
			cur_album = ""
			wait(callback=self.rpc.connect, 
				 err_msg="[ERROR] No discord process found. Waiting...")
			print("[OK] RPC started.")

			while True:
				time.sleep(1)
				status = self.get_status()
				if not status["playing"]:
					self.rpc.clear()
					cur_song = ""
					continue
				if cur_song != status["title"] or cur_album != status["album"]:
					cur_song = status["title"]
					cur_album = status["album"]

					cover_hash = self.extract_cover(status)
					self.notify(status, cover_hash)
					print("[OK] Status: ", end="")
					print_dict(status)

					self.rpc.update(
						large_image=self.upload_cover(status, cover_hash),
						small_image="play-black",
						large_text=status["album"],
						small_text=status["length"],
						details="%s"%status["title"],
						state="%s"%status["artist"],
						start=time.time()-status["elapsed_time"]
					)
		finally:
			self.rpc.close()
			print("[OK] RPC closed.")
			
			os.system("rm -rf '%s'"%self.cover_dir.replace("'", "'\\''"))
			print("[OK] Temp cover folder deleted.")

			for _, img in self.saved_imgs.items():
				img.delete()
				print("[OK] %s deleted."%img.link)
			print("[OK] img from Imgur deleted.")
		#	icons source:
		#	https://www.flaticon.com/free-icon/pause_709691
		#	https://www.flaticon.com/free-icon/play-button_109197

	def get_status(self):
		ret = {
			"file": "NaN",
			"playing": False,
			"length": 0,
			"elapsed_time": 0,

			"title": "NaN",
			"album": "NaN",
			"artist": "NaN"
		}
		try:
			result = subprocess.check_output(["cmus-remote", "-C", "status"])
		except:
			print("[ERROR] No cmus server found. Exit.")
			sys.exit()
		for line in result.decode("utf-8").split("\n"):
			params = line.split(" ")
			if params == []:
				continue
			match params[0]:
				case "status":
					ret["playing"] = params[1] == "playing"
				case "file":
					ret["file"] = " ".join(params[1:])
				case "duration":
					num = int(params[1])
					ret["length"] = "%s%02d : %02d"%("%02d : "%
					(num/3600) if num > 3600 else "", (num/60)%60, num%60)
				case "position":
					ret["elapsed_time"] = int(params[1])
				case "tag":
					ret[params[1]] = " ".join(params[2:])
					# failed when only one char (?)
					if len(ret[params[1]]) < 2:
						ret[params[1]] += " "
		return ret	

	def extract_cover(self, status):
		cover_hash = hash(status["album"].replace(" ", ""))
		cover_path = "%s/%s.jpg"%(self.cover_dir, cover_hash)
		filename = status["file"].replace("'", "'\\''")
		if not os.path.exists(cover_path):
			os.system("mkdir -p '%s'"%self.cover_dir.replace("'", "'\\''"))
			os.system("ffmpeg -i '%s' -an -vcodec copy '%s' 2>/dev/null"%(filename, cover_path.replace("'", "'\\''")))
		return cover_hash

	def upload_cover(self, status, cover_hash):
		if cover_hash in self.saved_imgs:
			return self.saved_imgs[cover_hash].link
		try:
			cover_path = "%s/%s.jpg"%(self.cover_dir, cover_hash)
			result = self.imgur.upload_image(cover_path, title=status["album"])
			self.saved_imgs[cover_hash] = result
			print("[OK] Cover URL:", result.link)
			return result.link
		except:
			print("[ERROR] Upload to Imgur failed.")
		return "captivate"

	def notify(self, status, cover_hash):
		cover_path = "%s/%s.jpg"%(self.cover_dir, cover_hash)
		if not os.path.exists(cover_path):
			cover_path = os.path.dirname(__file__)+"/captivate.jpg"
		os.system("notify-send -a 'C* Music Player' -i '%s' '	%s' '	%s\n	%s\n 	%s'"%(
			cover_path.replace("'", "'\\''"),
			status["title"].replace("'", "'\\''"),
			status["artist"].replace("'", "'\\''"), 
			status["album"].replace("'", "'\\''"),
			status["length"])
		)

if __name__ == "__main__":
	# you can use your own IDs
	imgur_id = "9208169c5394267"
	rpc_id = "989349655831785523"
	RPC(rpc_id, imgur_id).start()

	# ==> todos:
	# 1. jp2a visualizer